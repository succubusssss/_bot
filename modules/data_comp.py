from modules.parser_input import parser
import modules.messages as msg


def get_subj_list(json_data):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ JSON
    @json_data - –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ JSON
    """
    list_subj: list = []
    for index, key in enumerate(json_data):
        list_subj.extend(json_data[str(index)]["subject"])
        list_subj.extend(json_data[str(index)]["choice"])
    return list_subj


def data_comp(user_data: dict | str, json_data: dict):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã, –∏ –æ—Ç–¥–∞—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    @user_data - –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @json_data - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–ª–∞ *.json
    """
    # —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
    suit_spec: list = []
    u_data = user_data

    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ JSON –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø–µ—á–∞—Ç–æ–∫
    _list: list = get_subj_list(json_data)
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    parsed_data = parser(user_data, _list)
    if type(parsed_data) == str:
        return parsed_data
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º–µ–Ω–Ω–æ —Ç—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    if len(parsed_data) != 3:
        return msg.error([parsed_data, "length"])

    # —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    key_list: list = []

    for key in parsed_data:
        key_list.append(key)

    for index, key in enumerate(json_data):
        subject_list = json_data[str(index)]["subject"]
        choice_subj_list = json_data[str(index)]["choice"]
        score = json_data[str(index)]["score"]
        rating = json_data[str(index)]["rating"]
        speciality = json_data[str(index)]["specialty"]

        # —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        match_subj = list(set(key_list) & set(subject_list))
        # —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –Ω–∞ –≤—ã–±–æ—Ä
        match_choice = list(set(key_list) & set(choice_subj_list))

        # —Å–æ–≤–ø–∞–≤—à–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        if len(match_subj) == 2:
            final_list = [*match_subj, *match_choice]
        else:
            final_list = []
        # —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª —Å–æ–≤–ø–∞–≤—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        sum_list = []
        smiles = ["ü•≥", "‚ò∫Ô∏è", "üòâ"]

        if len(final_list) > 2:
            for val in final_list:
                sum_list.append(parsed_data[val])
            if sum(sum_list) >= score:
                for indx, i in enumerate(rating):
                    if sum(sum_list) >= i:
                        if (indx + 1) <= 5:
                            smile = smiles[0]
                        elif ((indx + 1) > 5) and ((indx + 1) <= 20):
                            smile = smiles[1]
                        elif ((indx + 1) > 20):
                            smile = smiles[2]
                        suit_spec.append(
                            speciality
                            + f'\n{smile}–í –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É –≤—ã –±—ã –∑–∞–Ω—è–ª–∏ <b>{str(indx + 1)} –º–µ—Å—Ç–æ</b>'
                        )
                        break

    if not len(suit_spec):
        return "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π"
    else:
        return suit_spec
