from modules.parser_excel import parser_excel

example: str = f"–ü—Ä–∏–º–µ—Ä: —Ñ–∏–∑–∏–∫–∞ 80, —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ 90, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 77"
admin: str = '@ArikMoroz'


def answer(string: str):
    match string:
        case "/start":
            return f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠ –ø–æ —Ç—Ä—ë–º –ø—Ä–µ–¥–º–µ—Ç–∞–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–µ–ª –æ—Ü–µ–Ω–∫–∞".\n\n{example}'
        case "/help":
            return (
                f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç: {admin}"
            )
        #–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö excel
        case "/data_update":
            return parser_excel("./data/specialties.xlsx", "./data/spec.json")
        case _:
            return (
                "<b>–í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:</b>\n\n‚úÖ{}".format(
                    "\n\n‚úÖ".join(string)
                )
                if type(string) == list
                else string
            )


def error(val: list):
    if type(val[1]) == int:

        def info():
            if val[0].isdigit():
                return f'–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –±–∞–ª–ª–∞ "{val[0]}"'
            elif not len(val[0]):
                return f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"
            elif not val[0].isdigit():
                return f'–í—ã –Ω–µ –≤–≤–µ–ª–∏ –±–∞–ª–ª –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ "{val[0]}"'
            else:
                return val

        return (
            f"‚ùå{info()} (–ø–æ–∑–∏—Ü–∏—è {val[1]})\n\n{example}"
        )

    elif "typo" in val[1]:
        return f'<b>‚ùå</b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ: "{val[0]}"\n\n{example}\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.'
    elif "length" in val[1]:
        return f'<b>‚ùå</b>–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ –ª—é–±—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä\n\n{example}'
    elif "min_score" in val[1]:
        return f'üòî–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –±–∞–ª–ª —É –ø—Ä–µ–¥–º–µ—Ç–∞ "{val[0][0]}", –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª "{val[0][1]}"'
    elif "hyper_score" in val[1]:
        return f'üòë–ë–∞–ª–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 ("{val[0]}")'
    else:
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞\n\n{example}"
